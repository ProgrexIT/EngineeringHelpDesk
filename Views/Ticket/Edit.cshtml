@model Help_Desk_2.Models.Ticket

@{ViewBag.Title = "Ticket: TMP" + Model.ID;}

@section scriptsCustom {
    <script src="~/Scripts/script-custom.js" type="text/javascript"></script>
}

<div class="container">
    <h2>@ViewBag.Title <span class="summary-top pull-right">@Html.DisplayFor(model => model.status)</span></h2>
    <p class="text-muted">Created by @Html.DisplayFor(model => model.UserProfile.displayName) on @Html.DisplayFor(model => model.dateComposed)</p>
</div>
   
<hr class="title"/>
@using (Html.BeginForm("Edit", "Ticket", FormMethod.Post,
     new { enctype = "multipart/form-data" }))
{
@Html.AntiForgeryToken()

<div class="form-horizontal">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)
    
    <div class="container">
                  
        <div>
            @Html.LabelFor(model => model.headerText, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.headerText, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.headerText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.TextAreaFor(model => model.description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <!--Attachment section-->
        <div class="form-custom">
            @Html.Label("Attachments", htmlAttributes: new { @class = "control-label" })
            @if (Model.Files != null && Model.Files.Count > 0)
            {
                <table class="table table-condensed">
            
                    <tr><th>File Name</th><th>Size</th><th></th></tr>
                    @foreach (var t in Model.Files)
                    {
                
                    <tr>
                        <td class="fileID hidden">@t.ID</td>
                        <td>@t.fileName</td>
                        <td>@t.displaySize / @t.size / @String.Format("{0,6:0.00}", t.size/ 1024))</td>

                        <td>
                            <div tabindex="500" class="btn btn-primary btn-custom btn-custom-undelete hidden">
                                <i class="fa fa-undo"></i>
                                <span class="hidden-xs">Undelete</span>
                            </div>

                            <div tabindex="500" class="btn btn-primary btn-custom btn-custom-delete">
                                <i class="glyphicon glyphicon-trash"></i>
                                <span class="hidden-xs">Delete</span>
                            </div>
                        </td>

                    </tr>
                    }
                </table>
            }
            <input type="file" name="file1" class="file" data-show-upload="false" data-show-preview="false" />
        </div>

        <!-- Links -->
        <div>
            @Html.HiddenFor(model => model.links)
            <label>Links</label>
            
            <table class="table table-condensed links">
                <tbody>
                    @{
                        string tmpLinks = Model.links;
                        string displayLinks = "";
                        if (!string.IsNullOrEmpty(tmpLinks))
                        {
                            var links = tmpLinks.Split(new char[] { '|' });
                            foreach (string link in links)
                            {
                                if (!string.IsNullOrEmpty(link))
                                {
                                    var tmp = link.Split(new char[] { '^' });
                                    displayLinks += "<tr class=\"normal\"><td><a href=\"" + tmp[1] + "\" target=\"_blank\">" + tmp[0] + "</a></td></tr>";
                                }
                            }
                        }
                    }
                </tbody>
                @Html.Raw(displayLinks);
            </table>
            <div class="add-link">
                <div class="col-sm-5">
                    <input type="text" id="linkText" name="linkText" placeholder="Link Display Text" />
                </div>

                <div class="col-sm-5">
                    <input type="text" id="linkURL" name="linkURL" placeholder="Link URL" />
                </div>

                <div class="col-sm-1">
                    <input type="button" id="addLink" value="Add Link" class="btn btn-default" />
                </div>

            </div>
        </div>


        @if (false) {
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.dateSubmitted, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.dateSubmitted, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.dateSubmitted, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-sm-6">
                @Html.LabelFor(model => model.adminEmail, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.adminEmail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.adminEmail, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.dateL1Release, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.dateL1Release, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.dateL1Release, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-sm-6">
                @Html.LabelFor(model => model.dateL2Release, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.dateL2Release, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.dateL2Release, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.sanityCheck, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.sanityCheck, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sanityCheck, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        }
        <div>
            <div class="btn-group btn-group-custom" style="padding-bottom:15px; padding-top:15px">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
</div>

}

@section Scripts {
@Scripts.Render("~/bundles/jqueryval")
}
